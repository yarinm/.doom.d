#+options: toc:2
#+title: Emacs doom configuration
#+date: <2020-04-25 Sat>
#+author: Yarin miran
#+email: yarin@gmail.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 26.3 (Org mode 9.4)

* Configuration
** Personal information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Yarin miran"
      user-mail-address "yarin@beyond.security")
#+END_SRC
** Globals
#+BEGIN_SRC emacs-lisp

#+END_SRC
** Doom core
*** Theme
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "monospace" :size 14))
(setq doom-theme 'doom-one)
#+END_SRC
*** File types
**** YAML go templates
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.yaml\.gotmpl\\'" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\'" . yaml-mode))
#+END_SRC

*** Keybindings
**** Easy window navigation
#+BEGIN_SRC emacs-lisp
(map!
    (:map evil-window-map
    "<left>"   #'evil-window-left
    "<down>"   #'evil-window-down
    "<up>"   #'evil-window-up
    "<right>"   #'evil-window-right))
#+END_SRC
**** Open treemacs
#+BEGIN_SRC emacs-lisp
(map! "<f4>" #'treemacs)
#+END_SRC
**** Editor navigation
#+BEGIN_SRC emacs-lisp
(map! "<home>" #'beginning-of-line)
(map! "<end>" #'end-of-line)
#+END_SRC
*** Editor
**** Display line numbers
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'relative)
#+END_SRC
**** Multi edit
Highlights all matches of the selection in the buffer.
#+BEGIN_SRC emacs-lisp
(define-key evil-visual-state-map "R" 'evil-multiedit-match-all)
#+END_SRC**
Match the word under cursor (i.e. make it an edit region). Consecutive presses will
incrementally add the next unmatched match.
#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "M-d") 'evil-multiedit-match-and-next)
#+END_SRC**
Match selected region.
#+BEGIN_SRC emacs-lisp
(define-key evil-visual-state-map (kbd "M-d") 'evil-multiedit-match-and-next)
#+END_SRC**
Insert marker at point
#+BEGIN_SRC emacs-lisp
(define-key evil-insert-state-map (kbd "M-d") 'evil-multiedit-toggle-marker-here)
#+END_SRC**
Same as M-d but in reverse.
#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "M-D") 'evil-multiedit-match-and-prev)
#+END_SRC**

* Modules
** Org mode
*** Paths
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/workspace/org/")
(setq deft-directory org-directory)
#+END_SRC

*** To do keywords
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-todo-keywords '((sequence "TODO(t)" "INPROG(i!)" "BLOCKED(b!)" "|" "DONE(d!)" "DISCARDED"))
        org-todo-keyword-faces
                          '(("TODO" :foreground "Spring green" :weight bold)
                            ("INPROG" :foreground "Gold" :weight bold)
                            ("BLOCKED" :foreground "Indian red" :weight bold)
                            ("DONE" :foreground "slategrey" :weight bold :strike-through t)
                            ("DISCARDED" :foreground "slategrey" :weight bold :strike-through t)
                            )
  )
)

#+END_SRC
*** Link types
#+BEGIN_SRC emacs-lisp
(after! org
  (add-to-list 'org-link-abbrev-alist '("jira" . "https://beyondnetworks.atlassian.net/browse/BE-%s"))
  (add-to-list 'org-link-abbrev-alist '("pr" . "https://github.com/beyondnetworks/beyond/pull/%s"))
)
#+END_SRC
*** Capture templates
#+BEGIN_SRC emacs-lisp

(after! org
  (defvar my-task-file (format "%stasks.org" org-directory))
  (defvar my-notes-file (format "%snotes.org" org-directory))
  (setq org-capture-templates
               '(("t" "Work related task" entry
                 (file+headline my-task-file "Tasks") "* TODO %?" :prepend t)
                ("p" "New project" entry
                 (file+headline my-task-file "Projects") "* %?" :prepend t)
                ("r" "Pull request to review" entry
                 (file+headline my-task-file "PRs to review") "* TODO %? [[pr:%^{id}][PR %\\1]]\nCREATED: %T" :prepend t)
                ("R" "Read later" entry
                 (file+headline my-notes-file "Read later") "* [[%^{link}][%?]]\nCREATED: %T" :prepend t))
  )
)
#+END_SRC
*** Property inheritence
#+BEGIN_SRC emacs-lisp
(setq org-use-property-inheritance t)
#+END_SRC
*** Mermaid
#+BEGIN_SRC emacs-lisp
(setq ob-mermaid-cli-path "/usr/local/bin/mmdc")
#+END_SRC

#+RESULTS:
: /usr/local/bin/mmdc

** Evil-snipe
Disable evil snipe in magit buffers due to a bug
#+BEGIN_SRC emacs-lisp
(add-hook 'magit-mode-hook 'turn-off-evil-snipe-override-mode)
#+END_SRC
** LSP
#+BEGIN_SRC emacs-lisp
(setq lsp-auto-guess-root nil)
#+END_SRC
** Magit
Commit max length
#+BEGIN_SRC emacs-lisp
(after! magit
         (setq git-commit-summary-max-length 160))

#+END_SRC
